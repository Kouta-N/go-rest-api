## **基本構造**

✅ **アーキテクチャが4つの層に分かれているか？**

- [✖️]  **エンティティ（Entities）**（ビジネスルール）
- [✖️]  **ユースケース（Use Cases）**（アプリケーションのルール）
- [✖️]  **インターフェース（Interface Adapters）**（プレゼンテーション、API）
- [✖️]  **インフラストラクチャ（Infrastructure）**（DB、外部サービス）

✅ **各層が適切に依存しているか？（内側 → 外側のみ）**

- [✖️]  外側の層（インフラ・UI）が内側（ユースケース・エンティティ）に依存していない
- [✖️]  依存関係を制御するために**依存逆転の原則（DIP）**が守られている

✅ **ビジネスルールがインフラに依存していないか？**

- [✖️]  データベースの種類（MySQL, MongoDBなど）を変更してもエンティティとユースケースが影響を受けない
- [✖️]  外部サービス（API, メール, 認証）を変更してもユースケースの変更が最小限で済む

---

## **🔍 エンティティ（Entities / ドメインモデル）**

✅ **ビジネスルールは閉じ込められているか？**

- [✖️]  ルールが他の層に分散していない（例: コントローラーやリポジトリにビジネスロジックがない）
- [✖️]  状態（データ）と振る舞い（メソッド）が適切にエンティティ内にまとめられている

✅ **エンティティは技術的な詳細（データベース、UI）に依存していないか？**

- [✖️]  SQLクエリやAPIの詳細がエンティティに含まれていない
- [✖️]  フレームワーク固有のアノテーション（例: `@Entity`, `@Table`）がエンティティに含まれていない

---

## **🚀 ユースケース（Use Cases / アプリケーションのルール）**

✅ **ユースケースがビジネスルールを扱っているか？**

- [✖️]  ユースケースのクラスは、エンティティを操作して目的を達成する責務を持つ
- [✖️]  外部サービス（DB、API）とやりとりする処理は、インターフェースを通じて行われている

✅ **ユースケースはUIやインフラに依存していないか？**

- [✖️]  画面の詳細（ボタンの動作、HTML/CSS）を含んでいない
- [✖️]  DBの具体的な操作（SQLクエリなど）を直接書いていない

✅ **ユースケースのインターフェース（境界）が適切に設計されているか？**

- [✖️]  インターフェースを通じてデータを取得・保存する（例: `UserRepository` の `findById(id)` を使用）
- [✖️]  インターフェースの実装は**インフラ層で行う**

---

## **🖥 インターフェースアダプター（Interface Adapters / プレゼンテーション層）**

✅ **データのやりとりをユースケースに合わせて変換しているか？**

- [✖️]  コントローラーやAPIはリクエストデータをユースケースに渡すだけになっている
- [✖️]  ユースケースの戻り値を、レスポンスフォーマットに適した形に変換している

✅ **プレゼンテーション層がビジネスロジックを持っていないか？**

- [✖️]  コントローラーやAPIに**ビジネスルールの処理が書かれていない**
- [✖️]  フロントエンドやAPIの変更が、ユースケースやエンティティに影響を与えない

---

## **💾 インフラストラクチャ（Infrastructure / データ・外部サービス）**

✅ **データベースや外部サービスの変更がシステム全体に影響しないか？**

- [✖️]  リポジトリパターンを使って、データの取得・保存を抽象化している
- [✖️]  外部サービスの詳細（APIのURL、認証方法など）を直接ユースケースに書いていない

✅ **データアクセスをユースケースから分離しているか？**

- [✖️]  具体的なデータベースの操作は**リポジトリの実装クラス**で行う
- [✖️]  SQLやORMのコードは**インフラ層にのみ存在**している

✅ **依存関係逆転の原則（DIP）を守っているか？**

- [✖️]  ユースケースは具体的なリポジトリの実装ではなく、インターフェースに依存している
- [✖️]  データベースを変更しても、ユースケースやエンティティに影響がない

---

## **🔄 その他の設計原則**

✅ **SOLID原則を守っているか？**

- [✖️]  **単一責任の原則（SRP）**：1つのクラスが1つの責務だけを持っているか？
- [✖️]  **オープン・クローズドの原則（OCP）**：機能追加がしやすく、コードを変更せずに拡張できるか？
- [✖️]  **リスコフの置換原則（LSP）**：継承が正しく使われているか？
- [✖️]  **インターフェース分離の原則（ISP）**：不要なメソッドが含まれていないか？
- [✖️]  **依存関係逆転の原則（DIP）**：上位モジュールが下位モジュールに依存していないか？

✅ **依存関係の方向が正しいか？**

- [✖️]  ビジネスロジックがフレームワークやライブラリに依存していないか？
- [✖️]  UIやDBの変更が、ユースケースやエンティティに影響しないようになっているか？

✅ **テストしやすい構造になっているか？**

- [✖️]  ユースケースは単体テストしやすいように設計されているか？
- [✖️]  外部サービス（DBやAPI）はモック化できるようになっているか？